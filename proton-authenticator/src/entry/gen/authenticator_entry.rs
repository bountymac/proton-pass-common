// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by protoc 28.2
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `authenticator_entry.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:AuthenticatorEntryContent)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AuthenticatorEntryContent {
    // message fields
    // @@protoc_insertion_point(field:AuthenticatorEntryContent.entry_type)
    pub entry_type: ::protobuf::EnumOrUnknown<AuthenticatorEntryType>,
    // @@protoc_insertion_point(field:AuthenticatorEntryContent.uri)
    pub uri: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:AuthenticatorEntryContent.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AuthenticatorEntryContent {
    fn default() -> &'a AuthenticatorEntryContent {
        <AuthenticatorEntryContent as ::protobuf::Message>::default_instance()
    }
}

impl AuthenticatorEntryContent {
    pub fn new() -> AuthenticatorEntryContent {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "entry_type",
            |m: &AuthenticatorEntryContent| { &m.entry_type },
            |m: &mut AuthenticatorEntryContent| { &mut m.entry_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uri",
            |m: &AuthenticatorEntryContent| { &m.uri },
            |m: &mut AuthenticatorEntryContent| { &mut m.uri },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AuthenticatorEntryContent>(
            "AuthenticatorEntryContent",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AuthenticatorEntryContent {
    const NAME: &'static str = "AuthenticatorEntryContent";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.entry_type = is.read_enum_or_unknown()?;
                },
                18 => {
                    self.uri = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.entry_type != ::protobuf::EnumOrUnknown::new(AuthenticatorEntryType::TOTP) {
            my_size += ::protobuf::rt::int32_size(1, self.entry_type.value());
        }
        if !self.uri.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.uri);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.entry_type != ::protobuf::EnumOrUnknown::new(AuthenticatorEntryType::TOTP) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.entry_type))?;
        }
        if !self.uri.is_empty() {
            os.write_string(2, &self.uri)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AuthenticatorEntryContent {
        AuthenticatorEntryContent::new()
    }

    fn clear(&mut self) {
        self.entry_type = ::protobuf::EnumOrUnknown::new(AuthenticatorEntryType::TOTP);
        self.uri.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AuthenticatorEntryContent {
        static instance: AuthenticatorEntryContent = AuthenticatorEntryContent {
            entry_type: ::protobuf::EnumOrUnknown::from_i32(0),
            uri: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AuthenticatorEntryContent {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AuthenticatorEntryContent").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AuthenticatorEntryContent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthenticatorEntryContent {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:AuthenticatorEntry)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AuthenticatorEntry {
    // message fields
    // @@protoc_insertion_point(field:AuthenticatorEntry.content)
    pub content: ::protobuf::MessageField<AuthenticatorEntryContent>,
    // @@protoc_insertion_point(field:AuthenticatorEntry.note)
    pub note: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:AuthenticatorEntry.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AuthenticatorEntry {
    fn default() -> &'a AuthenticatorEntry {
        <AuthenticatorEntry as ::protobuf::Message>::default_instance()
    }
}

impl AuthenticatorEntry {
    pub fn new() -> AuthenticatorEntry {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, AuthenticatorEntryContent>(
            "content",
            |m: &AuthenticatorEntry| { &m.content },
            |m: &mut AuthenticatorEntry| { &mut m.content },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "note",
            |m: &AuthenticatorEntry| { &m.note },
            |m: &mut AuthenticatorEntry| { &mut m.note },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AuthenticatorEntry>(
            "AuthenticatorEntry",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AuthenticatorEntry {
    const NAME: &'static str = "AuthenticatorEntry";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.content)?;
                },
                18 => {
                    self.note = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.content.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.note.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.note);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.content.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.note.is_empty() {
            os.write_string(2, &self.note)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AuthenticatorEntry {
        AuthenticatorEntry::new()
    }

    fn clear(&mut self) {
        self.content.clear();
        self.note.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AuthenticatorEntry {
        static instance: AuthenticatorEntry = AuthenticatorEntry {
            content: ::protobuf::MessageField::none(),
            note: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AuthenticatorEntry {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AuthenticatorEntry").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AuthenticatorEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthenticatorEntry {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:AuthenticatorEntryType)
pub enum AuthenticatorEntryType {
    // @@protoc_insertion_point(enum_value:AuthenticatorEntryType.TOTP)
    TOTP = 0,
    // @@protoc_insertion_point(enum_value:AuthenticatorEntryType.STEAM)
    STEAM = 2,
}

impl ::protobuf::Enum for AuthenticatorEntryType {
    const NAME: &'static str = "AuthenticatorEntryType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<AuthenticatorEntryType> {
        match value {
            0 => ::std::option::Option::Some(AuthenticatorEntryType::TOTP),
            2 => ::std::option::Option::Some(AuthenticatorEntryType::STEAM),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<AuthenticatorEntryType> {
        match str {
            "TOTP" => ::std::option::Option::Some(AuthenticatorEntryType::TOTP),
            "STEAM" => ::std::option::Option::Some(AuthenticatorEntryType::STEAM),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [AuthenticatorEntryType] = &[
        AuthenticatorEntryType::TOTP,
        AuthenticatorEntryType::STEAM,
    ];
}

impl ::protobuf::EnumFull for AuthenticatorEntryType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("AuthenticatorEntryType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            AuthenticatorEntryType::TOTP => 0,
            AuthenticatorEntryType::STEAM => 1,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for AuthenticatorEntryType {
    fn default() -> Self {
        AuthenticatorEntryType::TOTP
    }
}

impl AuthenticatorEntryType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<AuthenticatorEntryType>("AuthenticatorEntryType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19authenticator_entry.proto\"e\n\x19AuthenticatorEntryContent\x126\n\
    \nentry_type\x18\x01\x20\x01(\x0e2\x17.AuthenticatorEntryTypeR\tentryTyp\
    e\x12\x10\n\x03uri\x18\x02\x20\x01(\tR\x03uri\"^\n\x12AuthenticatorEntry\
    \x124\n\x07content\x18\x01\x20\x01(\x0b2\x1a.AuthenticatorEntryContentR\
    \x07content\x12\x12\n\x04note\x18\x02\x20\x01(\tR\x04note*-\n\x16Authent\
    icatorEntryType\x12\x08\n\x04TOTP\x10\0\x12\t\n\x05STEAM\x10\x02b\x06pro\
    to3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(AuthenticatorEntryContent::generated_message_descriptor_data());
            messages.push(AuthenticatorEntry::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(AuthenticatorEntryType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
