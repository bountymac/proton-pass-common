namespace proton_pass_common_mobile {
    string library_version();
};

[Error]
enum AliasPrefixError {
    "TwoConsecutiveDots",
    "InvalidCharacter",
    "DotAtTheEnd",
    "PrefixTooLong",
    "PrefixEmpty",
    "DotAtTheBeginning"
};

interface AliasPrefixValidator {
    constructor();
    [Throws=AliasPrefixError]
    void validate(string prefix);
};


dictionary Login {
    string title;
    string username;
    string password;
    string? totp;
    sequence<string> urls;
};

[Error]
enum LoginError {
    "InvalidTOTP",
    "InvalidURL",
};

interface LoginValidator {
    constructor();
    [Throws=LoginError]
    void validate(Login login);
};

interface EmailValidator {
    constructor();
    boolean is_email_valid(string email);
};

[Error]
enum TOTPError {
    "InvalidAuthority",
    "NoAuthority",
    "InvalidAlgorithm",
    "InvalidScheme",
    "URLParseError",
    "NoSecret",
    "EmptySecret",
    "NoQueries"
};

enum TOTPAlgorithm {
    "SHA1",
    "SHA256",
    "SHA512"
};

dictionary TOTPComponents {
    string? label;
    string secret;
    string? issuer;
    TOTPAlgorithm? algorithm;
    u8? digits;
    u16? period;
};

interface TotpUriSanitizer {
    constructor();
    string uri_for_editing(string original_uri);
    string uri_for_saving(string original_uri, string edited_uri);
};

interface TotpUriParser {
    constructor();
    [Throws=TOTPError]
    TOTPComponents parse(string uri_string);
};